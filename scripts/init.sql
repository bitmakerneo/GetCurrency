CREATE USER test IDENTIFIED BY test;
GRANT CONNECT, RESOURCE TO test;
SELECT username, account_status FROM dba_users WHERE username = 'TEST';

CREATE TABLE CURS_XML_NOW
(
  ID NUMERIC (22,0) NOT NULL PRIMARY KEY,
  OID NUMBER(16,0) NOT NULL,
  CREATE_DATE DATE DEFAULT SYSDATE NOT NULL,
  CODE VARCHAR(3) UNIQUE NOT NULL,
  NAME VARCHAR(250) NOT NULL,
  RATE NUMERIC (18,4),
  QUANTITY NUMERIC (16,0)
);

CREATE TABLE CURS_XML
(
  ID NUMERIC (22,0) NOT NULL PRIMARY KEY,
  OID NUMBER(16,0) NOT NULL,
  CREATE_DATE DATE DEFAULT SYSDATE NOT NULL,
  CODE VARCHAR(3),
  NAME VARCHAR(250),
  RATE NUMERIC (18,4),
  QUANTITY NUMERIC (16,0)
)
PARTITION BY RANGE (CREATE_DATE) INTERVAL(NUMTOYMINTERVAL(1, 'MONTH'))
(
	PARTITION FIRST VALUES LESS THAN (TO_DATE('2000-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))  
);

CREATE TABLE CURS_XML_SEND
(
  ID NUMERIC (22,0) NOT NULL PRIMARY KEY,
  CREATE_DATE DATE DEFAULT SYSDATE NOT NULL,
  XML_DATA CLOB
);

CREATE SEQUENCE CURS_XML_NOW_ID_SEQ;

CREATE OR REPLACE TRIGGER CURS_XML_NOW_BEFORE_INSERT
BEFORE INSERT ON CURS_XML_NOW
FOR EACH ROW
BEGIN
    IF :new.ID IS NULL THEN
        SELECT CURS_XML_NOW_ID_SEQ.NEXTVAL INTO :new.ID FROM DUAL;
    END IF;
END;

CREATE SEQUENCE CURS_XML_ID_SEQ;

CREATE OR REPLACE TRIGGER CURS_XML_BEFORE_INSERT
BEFORE INSERT ON CURS_XML
FOR EACH ROW
BEGIN
    IF :new.ID IS NULL THEN
        SELECT CURS_XML_ID_SEQ.NEXTVAL INTO :new.ID FROM DUAL;
    END IF;
END;

CREATE SEQUENCE CURS_XML_SEND_ID_SEQ;

CREATE OR REPLACE TRIGGER CURS_XML_SEND_BEFORE_INSERT
BEFORE INSERT ON CURS_XML_SEND
FOR EACH ROW
BEGIN
    IF :new.ID IS NULL THEN
        SELECT CURS_XML_SEND_ID_SEQ.NEXTVAL INTO :new.ID FROM DUAL;
    END IF;
END;

CREATE OR REPLACE PROCEDURE COPY_DATA_TO_CURS_XML
AS
  CURSOR C IS
  SELECT * 
  FROM curs_xml_now;
  R C%ROWTYPE;
BEGIN
  OPEN C;
  LOOP
    FETCH C INTO R;
    EXIT WHEN C%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(R.CREATE_DATE ||' '|| R.OID ||' '|| R.CODE || ' ' || R.NAME || ' ' || R.RATE ||' '|| R.QUANTITY);
    INSERT INTO CURS_XML (OID, CREATE_DATE, CODE, NAME, RATE, QUANTITY) 
        VALUES (R.OID, R.CREATE_DATE, R.CODE, R.NAME, R.RATE, R.QUANTITY);
  END LOOP;
  CLOSE C;
END;

CREATE OR REPLACE DIRECTORY RATES_DIR AS 'c:\GetCurrency\bin';
GRANT READ ON DIRECTORY RATES_DIR to test;

CREATE OR REPLACE PROCEDURE IMPORT_CURS_XML
(
    MATCH_DATE IN DATE 
)
AS
  FILECONTENT CLOB := NULL;
  SRC_FILE BFILE := BFILENAME('RATES_DIR', 'RATES.XML');
BEGIN
  DBMS_OUTPUT.PUT_LINE(MATCH_DATE);

  INSERT INTO curs_xml_send (CREATE_DATE, XML_DATA) VALUES 
  (MATCH_DATE, 
    XMLTYPE (BFILENAME ('RATES_DIR', 'RATES.XML'), NLS_CHARSET_ID ('AL32UTF8')).GETCLOBVAL()
  );
END;